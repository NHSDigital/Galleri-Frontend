import React from "react";
import { fireEvent, render, screen } from "@testing-library/react";
import "@testing-library/jest-dom";
import ClinicInformation from "./ClinicInformation";
import axios from "axios";
import { AppStateContext } from "@/app/context/AppStateContext";
import { act } from "@testing-library/react";

jest.mock("axios");

const mockState = {
  icbData: ["Mock ICB Data"],
  icbSelected: "Mock ICB Selected",
  clinicIdSelected: "mockClinicId123",
  clinicNameSelected: "Mock Clinic Name",
  lastUpdated: "15 July 2024, 2.00pm",
  clinicList: [
    { clinicId: "1", clinicName: "Mock Clinic 1" },
    { clinicId: "2", clinicName: "Mock Clinic 2" },
  ],
  displayClinicsNoApp: true,
  navigateToClinic: true,
  clinicIdNameList: [
    { clinicId: "1", clinicName: "Mock Clinic 1" },
    { clinicId: "2", clinicName: "Mock Clinic 2" },
  ],
  clinicId: "mockClinicId123",
  clinicName: "Mock Clinic Name",
  address1: "123 Mock Street",
  address2: "Mocksville",
  postcode: "MK12 4GH",
  weeklyCapacity: [
    { date: "2024-07-20", value: 50 },
    { date: "2024-07-27", value: 60 },
  ],
  lastUpdated: "15 July 2024, 2.00pm",
  cancelChangeText: "Cancel change",
  currentlySelectedClinicId: "mockClinicId123",
  currentlySelectedClinic: "Mock Clinic Name",
  participatingICBSelected: "Mock ICB Selected",
  displayClinicSelector: true,
  displayViewAllPrevInvitations: true,
  recentInvitationHistory: {
    dateOfPrevInv: "14 July 2024",
    daysSincePrevInv: "1 day",
    invSent: 150,
    appsRemaining: 75,
    isSubmit: false,
  },
  rangeSelection: 2,
  targetAppToFill: 30,
  targetPercentageToFill: 60,
  totalToInvite: 100,
  avgExpectedUptake: 75,
  noInviteToGenerate: 50,
  personIdentifiedToInvite: ["Person1", "Person2"],
  pageSize: 10,
  currentPage: 1,
};

const mockApiResponse = {
  Availability: {
    N: "335",
  },
  Address: {
    S: "55 unorderable Hospital, Mordor KB2 1YR",
  },
  Directions: {
    S: "These will contain directions to the site",
  },
  ODSCode: {
    S: "Z54850",
  },
  ClinicId: {
    S: "BW59E520",
  },
  InvitesSent: {
    N: "167",
  },
  ICBCode: {
    S: "QJK",
  },
  LastSelectedRange: {
    N: "1",
  },
  TargetFillToPercentage: {
    N: "50",
  },
  PostCode: {
    S: "KB2 1YR",
  },
  PrevInviteDate: {
    S: "Thursday 2 November 2023",
  },
  ClinicName: {
    S: "Phlebotomy clinic 55",
  },
  WeekCommencingDate: {
    M: {
      "11 January 2024": {
        N: "82",
      },
      "21 December 2023": {
        N: "82",
      },
      "7 December 2023": {
        N: "90",
      },
      "28 December 2023": {
        N: "46",
      },
      "4 January 2024": {
        N: "30",
      },
      "14 December 2023": {
        N: "5",
      },
    },
  },
};

const mockContextValue = {
  state: mockState,
  setState: jest.fn(),
};

describe("Clinic Information render", () => {
  const clinicInformation = <ClinicInformation />;

  test("Page header renders", async () => {
    axios.get.mockResolvedValue({
      data: mockApiResponse,
    });

    await act(async () => {
      render(
        <AppStateContext.Provider value={mockContextValue}>
          <ClinicInformation />
        </AppStateContext.Provider>
      );
    });
    // render(
    //   <AppStateContext.Provider value={{ state: mockState }}>
    //     <ClinicInformation />
    //   </AppStateContext.Provider>
    // );
    let header = screen.getByText(/Clinic Invitations/);
    expect(header.innerHTML).toBe("Clinic Invitations");
  });
});

// test("Page summary renders", () => {
//   render(clinicInformation);
//   let summary = screen.getByText(
//     /View appointment availability, and set criteria to generate new invitations for a clinic./
//   );
//   expect(summary.innerHTML).toBe(
//     "View appointment availability, and set criteria to generate new invitations for a clinic."
//   );
// });

// test("Clinic weekly capacity table renders", () => {
//   render(clinicInformation);
//   let tableHeader = screen.getByText("Clinic Weekly Capacity");
//   expect(tableHeader.innerHTML).toBe(
//     'Clinic Weekly Capacity<div className="nhsuk-hint" id="last-updated-hint">Last Updated: 14 July 2024, 1.00am</div>'
//   );
// });

// test("Recent invitation history table renders", () => {
//   render(clinicInformation);
//   let tableHeader = screen.getByText("Recent Invitation History");
//   expect(tableHeader.innerHTML).toBe("Recent Invitation History");
// });

// test("LSOA Table renders", () => {
//   render(clinicInformation);
//   let tableHeader = screen.getByText(
//     "Select a distance from the clinic to find eligible people per lower layer super output area (LSOA)"
//   );
//   expect(tableHeader.innerHTML).toBe(
//     "Select a distance from the clinic to find eligible people per lower layer super output area (LSOA)"
//   );
// });

// test("Change/cancel button renders", () => {
//   const { container } = render(<ClinicInformation />);
//   let buttonText = screen.getByText("Change clinic");
//   expect(buttonText.innerHTML).toBe("Change clinic");
//   const button = container.querySelector(`a[id="changeCancelButtonId"]`);
//   fireEvent.click(button);
//   buttonText = screen.getByText("Cancel change");
//   expect(buttonText.innerHTML).toBe("Cancel change");
// });

// test("Clinic selector renders", () => {
//   const { container } = render(<ClinicInformation />);
//   const button = container.querySelector(`a[id="changeCancelButtonId"]`);
//   fireEvent.click(button);
//   const selector = container.querySelector(`select[id="clinic-selector"]`);
//   expect(selector).toBeTruthy();
// });

// test("Clinic invitation criteria header renders", () => {
//   render(clinicInformation);
//   let header = screen.getByText(/Clinic Invitation Criteria/);
//   expect(header.innerHTML).toBe("Clinic Invitation Criteria");
// });

// test("Target percentage header renders", () => {
//   render(clinicInformation);
//   let header = screen.getByText(
//     /Set the target percentage of appointments to fill/
//   );
//   expect(header.innerHTML).toBe(
//     "Set the target percentage of appointments to fill"
//   );
// });

// test("Target percentage input renders", () => {
//   render(clinicInformation);
//   let input = screen.getByTestId("input-target-percentage");
//   expect(input).toBeInTheDocument();
// });

// test("Summary list renders", () => {
//   render(clinicInformation);
//   let header = screen.getByText(/Target number of appointments to fill/);
//   expect(header.innerHTML).toBe("Target number of appointments to fill");
// });

// test("Target percentage update button renders", () => {
//   render(clinicInformation);
//   let button = screen.getByText("Update");
//   expect(button).toBeInTheDocument();
// });

// test("Calculate number to invite button renders", () => {
//   render(clinicInformation);
//   let button = screen.getByText(/Calculate number to invite/);
//   expect(button.innerHTML).toBe("Calculate number to invite");
//   expect(button).toBeInTheDocument();
// });
// });
