name: "CI/CD publish"

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  metadata:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    timeout-minutes: 1
    outputs:
      build_datetime: ${{ steps.metadata.outputs.build_datetime }}
      build_timestamp: ${{ steps.metadata.outputs.build_timestamp }}
      build_epoch: ${{ steps.metadata.outputs.build_epoch }}
      nodejs_version: ${{ steps.metadata.outputs.nodejs_version }}
      python_version: ${{ steps.metadata.outputs.python_version }}
      terraform_version: ${{ steps.metadata.outputs.terraform_version }}
      version: ${{ steps.variables.outputs.version }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Set CI/CD variables"
        id: variables
        run: |
          datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
          echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
          echo "nodejs_version=$(grep nodejs .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "python_version=$(grep python .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "terraform_version=$(grep terraform .tool-versions | cut -f2 -d' ')" >> $GITHUB_OUTPUT
          echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
      - name: "List variables"
        run: |
          export BUILD_DATETIME="${{ steps.variables.outputs.build_datetime }}"
          export BUILD_TIMESTAMP="${{ steps.variables.outputs.build_timestamp }}"
          export BUILD_EPOCH="${{ steps.variables.outputs.build_epoch }}"
          export NODEJS_VERSION="${{ steps.variables.outputs.nodejs_version }}"
          export PYTHON_VERSION="${{ steps.variables.outputs.python_version }}"
          export TERRAFORM_VERSION="${{ steps.variables.outputs.terraform_version }}"
          export VERSION="${{ steps.variables.outputs.version }}"
          make list-variables
  publish:
    runs-on: ubuntu-latest
    needs: [metadata]
    if: github.event.pull_request.merged == true
    timeout-minutes: 3
    env:
      release_tag: ""
      version_bump: "PATCH"
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Bump patch version"
        id: "bump-path-version"
        uses: ./.github/actions/versioning
        with:
          release_tag: ${{ env.release_tag }}
          version_bump: ${{ env.version_bump }}
      - name: "Checkout wiki"
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}.wiki
      - if: ${{ env.release_tag == '' }}
        run: |
          echo "Error: The current release tag has not been found"
          exit 1
      - name: Create Release Notes
        run: |
          echo "Using following tag to create markdown file: ${{ env.release_tag }}"
          echo "${{ github.event.pull_request.body }}" >> "v${{ env.release_tag }}.md"
          echo "- [v${{ env.release_tag }}](https://github.com/NHSDigital/Galleri-Invitations/wiki/v${{ env.release_tag }})" >> Home.md
      - name: Push to wiki
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          git add .
          git commit -m "docs: Added ${{ env.release_tag }} release file to wiki"
          git push
      - name: "Checkout code"
        uses: actions/checkout@v4
